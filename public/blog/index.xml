<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Toma Nistor</title>
    <link>https://tomanistor.com/blog/index.xml</link>
    <description>Recent content in Blogs on Toma Nistor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>false</copyright>
    <lastBuildDate>Fri, 05 May 2017 16:03:45 -0700</lastBuildDate>
    <atom:link href="https://tomanistor.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Shell Script to Clear CloudFlare Cache</title>
      <link>https://tomanistor.com/blog/shell-script-to-clear-cloudflare-cache/</link>
      <pubDate>Fri, 05 May 2017 16:03:45 -0700</pubDate>
      
      <guid>https://tomanistor.com/blog/shell-script-to-clear-cloudflare-cache/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://cloudflare.com&#34;&gt;CloudFlare&lt;/a&gt; is a free content delivery network (CDN) that helps deliver static content quickly and efficiently throughout the world. Caching and serving static content through dependable CDNs like CloudFlare, &lt;a href=&#34;https://maxcdn.com&#34;&gt;MaxCDN&lt;/a&gt;, or &lt;a href=&#34;https://aws.amazon.com/cloudfront/&#34;&gt;AWS CloudFront&lt;/a&gt; can help speed up your website drastically.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A CDN is essentially a network of geographically dispersed servers. Each CDN node (also called Edge Servers) caches the static content of a site like the images, CSS/JS files and other structural components. The majority of an end-user’s page load time is spent on retrieving this content, and so it makes sense to provide these “building blocks” of a site in as many server nodes as possible, distributed throughout the world.&lt;/p&gt;

&lt;p&gt;When a user requests your site, the node closest in proximity to user will deliver the static content, ensuring the shortest distance for the data to travel (reduced latency), therefore providing the fastest site experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Static resources like image, JavaScript, and CSS files that are cached by CloudFlare sometimes need to be purged before the CDN can deliver freshly updated resources. You could always log in to CloudFlare and purge the cache manually each time you make a website update, or you work smarter and create a shell script that does it for you upon deployment.&lt;/p&gt;

&lt;h2 id=&#34;get-your-cloudflare-global-api-key&#34;&gt;Get Your CloudFlare Global API Key&lt;/h2&gt;

&lt;p&gt;First, you must retrieve the CloudFlare &lt;strong&gt;Global API Key&lt;/strong&gt;. This key will be available on your CloudFlare account settings page. Copy this key to use in the next&lt;/p&gt;

&lt;h2 id=&#34;get-your-cloudflare-zone-id&#34;&gt;Get Your CloudFlare Zone ID&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Zone ID&lt;/strong&gt; can be found on your domain&amp;rsquo;s CloudFlare overview page.&lt;/p&gt;

&lt;p&gt;Another way to grab your Zone ID is to enter the following command in the terminal and replace the &lt;code&gt;X-Auth-Email&lt;/code&gt; with your email and the &lt;code&gt;X-Auth-Key&lt;/code&gt; with your Global API Key.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ curl -X GET &amp;quot;https://api.cloudflare.com/client/v4/zones&amp;quot; \
-H &amp;quot;X-Auth-Email: user@example.com&amp;quot; \
-H &amp;quot;X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda42&amp;quot; \
-H &amp;quot;Content-Type: application/json&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting output will be a load of information about your CloudFlare account&amp;rsquo;s domain names, including a Zone ID associated with each domain name.&lt;/p&gt;

&lt;h2 id=&#34;clear-your-cloudflare-cache&#34;&gt;Clear Your CloudFlare cache&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll use your domain&amp;rsquo;s Zone ID to clear the cache and force Cloudflare to fetch a fresh versions of your static files. Enter the following command in the terminal and again use your email for the &lt;code&gt;X-Auth-Email&lt;/code&gt; and your Global API Key for the &lt;code&gt;X-Auth-Key&lt;/code&gt;. However, now replace &lt;code&gt;ZONE-ID&lt;/code&gt; with your Zone ID.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ curl -X DELETE &amp;quot;https://api.cloudflare.com/client/v4/zones/ZONE-ID/purge_cache&amp;quot; \
-H &amp;quot;X-Auth-Email: user@example.com&amp;quot; \
-H &amp;quot;X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda42&amp;quot; \
-H &amp;quot;Content-Type:application/json&amp;quot; \
--data &#39;{&amp;quot;purge_everything&amp;quot;:true}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you made changes to the site they should now be visible since the cache will have been cleared.&lt;/p&gt;

&lt;h2 id=&#34;create-the-shell-script&#34;&gt;Create the Shell Script&lt;/h2&gt;

&lt;p&gt;Copy that last command into your text editor and add &lt;code&gt;#!/bin/bash&lt;/code&gt; to the very top of the file. Feel free to add a comment under that line so you know what the bash file does in the future. At the end, I also added an &lt;code&gt;echo&lt;/code&gt; to print out a message letting me know that the cache has been cleared. It should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;#!/bin/bash
# Clear CloudFlare cache for tomanistor.com

curl -X DELETE &amp;quot;https://api.cloudflare.com/client/v4/zones/ZONE-ID/purge_cache&amp;quot; \
-H &amp;quot;X-Auth-Email: user@example.com&amp;quot; \
-H &amp;quot;X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda42&amp;quot; \
-H &amp;quot;Content-Type:application/json&amp;quot; \
--data &#39;{&amp;quot;purge_everything&amp;quot;:true}&#39;

echo &amp;quot;CloudFlare cache has been cleared&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shell scripts should be saved in &lt;code&gt;usr/local/bin/&lt;/code&gt;. I named my script &lt;code&gt;cloudclear&lt;/code&gt; with no file extensions.&lt;/p&gt;

&lt;h2 id=&#34;run-the-script&#34;&gt;Run the Script&lt;/h2&gt;

&lt;p&gt;Type the name of your shell script in the terminal. If everything has been done correctly, the script will run and clear your CloudFlare cache.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cloudclear
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There it is! Faster DNS cache clearing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Workflow</title>
      <link>https://tomanistor.com/blog/hugo-workflow/</link>
      <pubDate>Fri, 28 Apr 2017 11:32:36 -0700</pubDate>
      
      <guid>https://tomanistor.com/blog/hugo-workflow/</guid>
      <description>

&lt;p&gt;The Hugo workflow is fairly simple and straightforward. This is the workflow I use to update and operate this blog and portfolio.&lt;/p&gt;

&lt;p&gt;Inside of your Hugo project folder, the &lt;code&gt;public/&lt;/code&gt; folder is generated with all of your static site files once &lt;code&gt;hugo&lt;/code&gt; is run in the terminal.&lt;/p&gt;

&lt;h2 id=&#34;purge-and-serve&#34;&gt;Purge and Serve&lt;/h2&gt;

&lt;p&gt;To generate a new &lt;code&gt;public/&lt;/code&gt; folder, just remove the existing one and run the server. All updates you have made to your content and theme are now available in the new &lt;code&gt;public/&lt;/code&gt; folder and visible on the live server.&lt;/p&gt;

&lt;p&gt;Always make sure to remove the old &lt;code&gt;public/&lt;/code&gt; folder otherwise Hugo will continue to update existing files and add new files without removed old unused files. You definitely don&amp;rsquo;t want the clutter and confusion.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rm -rf public/
$ hugo server --verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;livereload&#34;&gt;LiveReload&lt;/h3&gt;

&lt;p&gt;One of my favorite features in Hugo so far? LiveReload. The Hugo server automatically watches your project folder for changes and refreshes your browser when any new changes are made while editing, creating, or deleting files.&lt;/p&gt;

&lt;p&gt;This is great for development when you can make changes in your text editor and immediately see them occur in your browser window.&lt;/p&gt;

&lt;p&gt;If you want to disable LiveReload:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --disableLiveReload
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gulp-pipeline&#34;&gt;Gulp Pipeline&lt;/h2&gt;

&lt;p&gt;When making any styling changes or designing themes, I use a Gulp pipeline to compile my SCSS files into compressed CSS files that are then rendering into the &lt;code&gt;public/&lt;/code&gt; folder appropriately. Besides compiling and compressing style files, my gulpfile also runs a task that minifies my JavaScript files. Dan Bahrami has a &lt;a href=&#34;http://danbahrami.io/articles/building-a-production-website-with-hugo-and-gulp-js/&#34;&gt;great guide&lt;/a&gt; that includes setting up a Gulp pipeline and assigning Gulp tasks to watch for changes in style folders.&lt;/p&gt;

&lt;p&gt;To get the Gulp pipeline going after I start the Hugo server, I simply type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;new-content&#34;&gt;New Content&lt;/h2&gt;

&lt;p&gt;Creating new content in the project folder is also very simple. For example, I created this page as a markdown file inside of &lt;code&gt;content/blog/&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ hugo new blog/hugo-workflow.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far I&amp;rsquo;ve been enjoying writing blog posts in markdown.&lt;/p&gt;

&lt;h2 id=&#34;hugo-deploy&#34;&gt;Hugo Deploy&lt;/h2&gt;

&lt;p&gt;For deploying Hugo, I currently use &lt;a href=&#34;https://github.com/mindok/hugodeploy&#34;&gt;hugodeploy&lt;/a&gt;, a simple FTP/SFTP deployment tool built in Go. Content inside of &lt;code&gt;public/&lt;/code&gt; is effortlessly uploaded to my website&amp;rsquo;s root folder on my shared webhost account with two simple commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ hugodeploy preview
$ hugodeploy push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A neat extra feature of hugodeploy is the minification of CSS, HTML, JavaScript, JSON, and XML files upon deployment. While this option can be turned off, it does help with file size and site speed if you&amp;rsquo;re not already minifying your static files.&lt;/p&gt;

&lt;h3 id=&#34;rsync-process&#34;&gt;Rsync Process&lt;/h3&gt;

&lt;p&gt;An alternative deployment method I was thinking about using and may try out down the line is using rsync. Andrew Codispoti detailed the steps to &lt;a href=&#34;http://www.andrewcodispoti.com/deploy-process/&#34;&gt;setting up an rsync process&lt;/a&gt; that can deploy updates when committing and pushing with git.&lt;/p&gt;

&lt;h3 id=&#34;clear-cache&#34;&gt;Clear Cache&lt;/h3&gt;

&lt;p&gt;I use CloudFlare as my DNS to cache my static files and help serve them faster around the world. When deploying, I sometimes find that I&amp;rsquo;ll need to clear CloudFlare&amp;rsquo;s caches in order to serve up freshly update files. As a little shortcut to constantly going to the CloudFlare site and manually clearing the cache, I created a &lt;a href=&#34;blog/shell-script-to-clear-cloudflare-cache&#34;&gt;shell script that clears the cache&lt;/a&gt; after deployment when I call it in the terminal with: &lt;code&gt;cloudclear&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;All in all, my Hugo workflow is short and sweet. A typical update and publication to the live site can look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rm -rf public
$ hugo
$ hugodeploy preview
$ hugodeploy push
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Site is Launched</title>
      <link>https://tomanistor.com/blog/hugo-site-is-launched/</link>
      <pubDate>Thu, 30 Mar 2017 02:28:01 -0700</pubDate>
      
      <guid>https://tomanistor.com/blog/hugo-site-is-launched/</guid>
      <description>

&lt;p&gt;My new portfolio has officially been launched! This is my first static website built using Hugo. In my &lt;a href=&#34;https://tomanistor.com/content/post/starting-with-hugo&#34;&gt;previous post&lt;/a&gt;, I mapped out a few broad objectives for this project.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the completed goals from a short while ago and review.&lt;/p&gt;

&lt;h2 id=&#34;objectives&#34;&gt;Objectives&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;Create portfolio to display work&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Create blog to jot down my progress and help others along the way&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Implement design with SCSS&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Design new Hugo theme and distribute for others to used&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-portfolio&#34;&gt;Create Portfolio&lt;/h2&gt;

&lt;p&gt;The portfolio has been created and published in place of my old portfolio site. Currently, projects are displayed under the &amp;ldquo;Work&amp;rdquo; section on the index page. The index page was constructed as a one-page template to display a hero header, gallery of web projects, a list of the 10 latest blog posts, and a contact form.&lt;/p&gt;

&lt;h2 id=&#34;create-blog&#34;&gt;Create Blog&lt;/h2&gt;

&lt;p&gt;The blog post links on the index page lead to their own individual pages. The majority of the blog was based off of the &lt;a href=&#34;https://github.com/davidhampgonsalves/hugo-black-and-light-theme&#34;&gt;Hugo Black and Light Theme&lt;/a&gt; by David Hamp-Gonsalves. Overall, it was a well-constructed, minimalist, text-only theme without any scripts or clutter. The blog has been slightly redesigned but there is a bit more customization work to be done.&lt;/p&gt;

&lt;h2 id=&#34;use-scss&#34;&gt;Use SCSS&lt;/h2&gt;

&lt;p&gt;My first major challenge was figuring out how to use &lt;a href=&#34;http://sass-lang.com/&#34;&gt;SCSS&lt;/a&gt; outside of a Ruby on Rails project, since my previous installations of SASS were as easy as typing &lt;code&gt;gem install sass&lt;/code&gt; in the terminal. Luckily, I found a fantastically thorough tutorial by Dan Bahrami: &lt;a href=&#34;http://danbahrami.io/articles/building-a-production-website-with-hugo-and-gulp-js/&#34;&gt;Building a production website with Hugo and GulpJS&lt;/a&gt;. This also marked my first exposure to &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;design-distribute-hugo-theme&#34;&gt;Design &amp;amp; Distribute Hugo Theme&lt;/h2&gt;

&lt;p&gt;While the theme I&amp;rsquo;ve constructed is fine to publish now and use myself, there is a ways to go to clean it up and optimize it before distributing to the Hugo community. This will be the most challenging objective that I still need to complete and requires more studying of Hugo and the correct syntax. However, I&amp;rsquo;m very close to finishing the design portion of the theme!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Starting with Hugo</title>
      <link>https://tomanistor.com/blog/starting-with-hugo/</link>
      <pubDate>Mon, 13 Mar 2017 23:03:31 -0700</pubDate>
      
      <guid>https://tomanistor.com/blog/starting-with-hugo/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m finally ditching &lt;a href=&#34;https://wordpress.org&#34;&gt;Wordpress&lt;/a&gt; and testing out new waters with &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, the static site generator written in &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt;. Go is a speedy programming language developed by Google.&lt;/p&gt;

&lt;p&gt;During this new chapter of my career as a web developer, I&amp;rsquo;ll be moving away from dynamically generated site builders and constructing my new portfolio from the ground up in order to practice and refine my web developing skills with &lt;strong&gt;JavaScript&lt;/strong&gt;, &lt;strong&gt;Go&lt;/strong&gt;, and &lt;strong&gt;SCSS&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;objectives&#34;&gt;Objectives&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create portfolio to display work&lt;/li&gt;
&lt;li&gt;Create blog to jot down my progress and help others along the way&lt;/li&gt;
&lt;li&gt;Implement design with SCSS&lt;/li&gt;
&lt;li&gt;Design new Hugo theme and distribute for others to used&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When this post is published, the four primary objectives of my new Hugo portfolio site should be complete.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>